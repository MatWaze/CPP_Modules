#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "../doctest.h"
#include "ScalarConverter.hpp"
#include <iostream>
#include <sstream>
#include <string>

bool  CHECK_OUTPUT_INVALID(
    std::string str
)
{
    std::streambuf* oldBuf = std::cout.rdbuf();
    
    std::ostringstream os;
    std::cout.rdbuf(os.rdbuf());

    ScalarConverter::convert(str);

    std::cout.rdbuf(oldBuf);

    std::string ans = "str is invalid\n";

    return os.str() == ans;
}

bool  CHECK_OUTPUT(
    std::string str,
    std::string ch,
    std::string in,
    std::string fl,
    std::string db
)
{
    std::streambuf* oldBuf = std::cout.rdbuf();
    std::ostringstream os;
    std::cout.rdbuf(os.rdbuf());

    ScalarConverter::convert(str);

    std::cout.rdbuf(oldBuf);

    std::string ans = "char: " + ch + "\n" \
    + "int: " + in + "\n" \
    + "float: " + fl + "\n" \
    + "double: " + db + "\n";

    return os.str() == ans;
}

TEST_CASE("Testing char convert")
{
    CHECK(CHECK_OUTPUT("c", "c", "99", "99.0f", "99.0"));
    
    CHECK(CHECK_OUTPUT("A", "A", "65", "65.0f", "65.0"));
    
    CHECK(CHECK_OUTPUT("C", "C", "67", "67.0f", "67.0"));
    
    CHECK(CHECK_OUTPUT("~", "~", "126", "126.0f", "126.0"));
    
    CHECK(CHECK_OUTPUT("!", "!", "33", "33.0f", "33.0"));
    
    CHECK(CHECK_OUTPUT("Z", "Z", "90", "90.0f", "90.0"));
    
    CHECK(CHECK_OUTPUT("/", "/", "47", "47.0f", "47.0"));
    
    CHECK(CHECK_OUTPUT("\n", "Non displayable", "10", "10.0f", "10.0"));

    CHECK(CHECK_OUTPUT_INVALID("ÃŽ"));

    CHECK(CHECK_OUTPUT_INVALID("FDJFDJFDJDF"));

    CHECK(CHECK_OUTPUT_INVALID("\\\\"));
}

TEST_CASE("Testing int convert")
{
    CHECK(CHECK_OUTPUT("1", "Non displayable", "1", "1.0f", "1.0"));
    
    CHECK(CHECK_OUTPUT("65", "A", "65", "65.0f", "65.0"));
    
    CHECK(CHECK_OUTPUT("126", "~", "126", "126.0f", "126.0"));

    CHECK(CHECK_OUTPUT("2147483647", "impossible", "2147483647", "2.14748e+09f", "2.14748e+09"));
    
    CHECK(CHECK_OUTPUT("-2147483647", "impossible", "-2147483647", "-2.14748e+09f", "-2.14748e+09"));
    
    CHECK(CHECK_OUTPUT("-2147483648", "impossible", "-2147483648", "-2.14748e+09f", "-2.14748e+09"));
    
    CHECK(CHECK_OUTPUT("127", "impossible", "127", "127.0f", "127.0"));
    
    CHECK(CHECK_OUTPUT("0", "Non displayable", "0", "0.0f", "0.0"));
    
    CHECK(CHECK_OUTPUT("+0", "Non displayable", "0", "0.0f", "0.0"));
    
    CHECK(CHECK_OUTPUT("-0", "Non displayable", "0", "0.0f", "0.0"));
    
    CHECK(CHECK_OUTPUT("-14343", "impossible", "-14343", "-14343.0f", "-14343.0"));
    
    CHECK(CHECK_OUTPUT("+5433", "impossible", "5433", "5433.0f", "5433.0"));
    
    CHECK(CHECK_OUTPUT("10000", "impossible", "10000", "10000.0f", "10000.0"));
    
    CHECK(CHECK_OUTPUT("97", "a", "97", "97.0f", "97.0"));
    
    CHECK(CHECK_OUTPUT("32", "Non displayable", "32", "32.0f", "32.0"));
    
    CHECK(CHECK_OUTPUT("33", "!", "33", "33.0f", "33.0"));
    
    CHECK(CHECK_OUTPUT_INVALID("2147483648"));

    CHECK(CHECK_OUTPUT_INVALID("-2147483649"));

    CHECK(CHECK_OUTPUT_INVALID("-+0"));

    CHECK(CHECK_OUTPUT_INVALID("45548458548596599569659569655954954545434040304304305454585485858854"));
    
    CHECK(CHECK_OUTPUT_INVALID("-45548458548596599569659569655954954545434040304304305454585485858854"));
    
    CHECK(CHECK_OUTPUT_INVALID("--234343"));
}

TEST_CASE("Test float and double convert")
{
    CHECK(CHECK_OUTPUT("3.f", "Non displayable", "3", "3f", "3"));

    CHECK(CHECK_OUTPUT("0.f", "Non displayable", "0", "0f", "0"));

    CHECK(CHECK_OUTPUT(".0f", "Non displayable", "0", "0f", "0"));
    
    CHECK(CHECK_OUTPUT_INVALID(".f"));

    CHECK(CHECK_OUTPUT("340282346638528859811704183484516925440.0f", "impossible", "impossible", "3.40282e+38f", "3.40282e+38"));

    CHECK(CHECK_OUTPUT("-340282346638528859811704183484516925440.0f", "impossible", "impossible", "-3.40282e+38f", "-3.40282e+38"));

    CHECK(CHECK_OUTPUT("3402823466385288598117041834845169254400.0f", "impossible", "impossible", "inff", "3.40282e+39"));
    
    CHECK(CHECK_OUTPUT("-3402823466385288598117041834845169254400.0f", "impossible", "impossible", "-inff", "-3.40282e+39"));

    CHECK(CHECK_OUTPUT("340282346638528859811704183484516925440999999999999.0f", "impossible", "impossible", "inff", "3.40282e+50"));

    CHECK(CHECK_OUTPUT("-340282346638528859811704183484516925440999999999999.0f", "impossible", "impossible", "-inff", "-3.40282e+50"));

    CHECK(CHECK_OUTPUT("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0f", "impossible", "impossible", "inff", "1.79769e+308"));

    CHECK(CHECK_OUTPUT("-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0f", "impossible", "impossible", "-inff", "-1.79769e+308"));

    CHECK(CHECK_OUTPUT("1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680.0f", "impossible", "impossible", "inff", "inf"));

    CHECK(CHECK_OUTPUT("-1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680.0f", "impossible", "impossible", "-inff", "-inf"));

    CHECK(CHECK_OUTPUT("0.000000000000000000000000000000000000000000001401298464324817070923729583289916131280f", "Non displayable", "0", "1.4013e-45f", "1.4013e-45"));

    CHECK(CHECK_OUTPUT("-0.000000000000000000000000000000000000000000001401298464324817070923729583289916131280f", "Non displayable", "0", "-1.4013e-45f", "-1.4013e-45"));

    CHECK(CHECK_OUTPUT("0.00000000000000000000000000000000000000000000000000001401298464324817070923729583289916131280f", "Non displayable", "0", "0f", "0"));

    CHECK(CHECK_OUTPUT("-0.00000000000000000000000000000000000000000000000000001401298464324817070923729583289916131280f", "Non displayable", "0", "-0f", "-0"));

    CHECK(CHECK_OUTPUT("3.", "Non displayable", "3", "3f", "3"));

    CHECK(CHECK_OUTPUT("0.", "Non displayable", "0", "0f", "0"));

    CHECK(CHECK_OUTPUT(".0", "Non displayable", "0", "0f", "0"));

    CHECK(CHECK_OUTPUT("340282346638528859811704183484516925440.0", "impossible", "impossible", "3.40282e+38f", "3.40282e+38"));

    CHECK(CHECK_OUTPUT("-340282346638528859811704183484516925440.0", "impossible", "impossible", "-3.40282e+38f", "-3.40282e+38"));

    CHECK(CHECK_OUTPUT("3402823466385288598117041834845169254400.0", "impossible", "impossible", "inff", "3.40282e+39"));

    CHECK(CHECK_OUTPUT("-3402823466385288598117041834845169254400.0", "impossible", "impossible", "-inff", "-3.40282e+39"));

    CHECK(CHECK_OUTPUT("340282346638528859811704183484516925440999999999999.0", "impossible", "impossible", "inff", "3.40282e+50"));

    CHECK(CHECK_OUTPUT("-340282346638528859811704183484516925440999999999999.0", "impossible", "impossible", "-inff", "-3.40282e+50"));

    CHECK(CHECK_OUTPUT("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0", "impossible", "impossible", "inff", "1.79769e+308"));

    CHECK(CHECK_OUTPUT("-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0", "impossible", "impossible", "-inff", "-1.79769e+308"));

    CHECK(CHECK_OUTPUT("1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680.0", "impossible", "impossible", "inff", "inf"));

    CHECK(CHECK_OUTPUT("-1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583680.0", "impossible", "impossible", "-inff", "-inf"));

    CHECK(CHECK_OUTPUT("0.00000000000000000000000000000000000000000000000001401298464324817070923729583289916131280", "Non displayable", "0", "0f", "1.4013e-50"));

    CHECK(CHECK_OUTPUT("-0.00000000000000000000000000000000000000000000000001401298464324817070923729583289916131280", "Non displayable", "0", "-0f", "-1.4013e-50"));

    CHECK(CHECK_OUTPUT("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004940656458412465441765687928682213723651", "Non displayable", "0", "0f", "4.94066e-312"));

    CHECK(CHECK_OUTPUT("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004940656458412465441765687928682213723651", "Non displayable", "0", "0f", "0"));

    CHECK(CHECK_OUTPUT("nan", "impossible", "impossible", "nanf", "nan"));

    CHECK(CHECK_OUTPUT("inf", "impossible", "impossible", "inff", "inf"));

    CHECK(CHECK_OUTPUT("inff", "impossible", "impossible", "inff", "inf"));

    CHECK(CHECK_OUTPUT("-inff", "impossible", "impossible", "-inff", "-inf"));

    CHECK(CHECK_OUTPUT("-inf", "impossible", "impossible", "-inff", "-inf"));
}